---
 src/tmpfiles/tmpfiles.c |   51 +++++++++++++++++++++++++++++++++++++++++++++---
 1 file changed, 48 insertions(+), 3 deletions(-)

--- systemd-204.orig/src/tmpfiles/tmpfiles.c
+++ systemd-204/src/tmpfiles/tmpfiles.c
@@ -105,9 +105,12 @@ static bool arg_create = false;
 static bool arg_clean = false;
 static bool arg_remove = false;
 
+static const char *arg_sysroot = NULL;
 static const char *arg_prefix = NULL;
 
-static const char conf_file_dirs[] =
+#define ARRAY_SIZE(x) (sizeof(x) / sizeof((x)[0]))
+
+static const char def_conf_file_dirs[] =
         "/etc/tmpfiles.d\0"
         "/run/tmpfiles.d\0"
         "/usr/local/lib/tmpfiles.d\0"
@@ -116,6 +119,7 @@ static const char conf_file_dirs[] =
         "/lib/tmpfiles.d\0"
 #endif
         ;
+static char **conf_file_dirs = NULL;
 
 #define MAX_DEPTH 256
 
@@ -1116,6 +1120,16 @@ static int parse_line(const char *fname,
         if (arg_prefix && !path_startswith(i->path, arg_prefix))
                 return 0;
 
+        if (arg_sysroot && *arg_sysroot) {
+                char *new_path = NULL;
+
+                if (asprintf(&new_path, "%s%s", arg_sysroot, i->path) < 0) {
+                        return log_oom();
+                }
+                free(i->path);
+                i->path = new_path;
+        }
+
         if (user && !streq(user, "-")) {
                 const char *u = user;
 
@@ -1202,6 +1216,7 @@ static int help(void) {
                "     --create           Create marked files/directories\n"
                "     --clean            Clean up marked directories\n"
                "     --remove           Remove marked files/directories\n"
+               "     --sysroot=PATH     Operate relative to the specified sysroot\n"
                "     --prefix=PATH      Only apply rules that apply to paths with the specified prefix\n",
                program_invocation_short_name);
 
@@ -1214,6 +1229,7 @@ static int parse_argv(int argc, char *ar
                 ARG_CREATE,
                 ARG_CLEAN,
                 ARG_REMOVE,
+                ARG_SYSROOT,
                 ARG_PREFIX
         };
 
@@ -1222,6 +1238,7 @@ static int parse_argv(int argc, char *ar
                 { "create",    no_argument,       NULL, ARG_CREATE    },
                 { "clean",     no_argument,       NULL, ARG_CLEAN     },
                 { "remove",    no_argument,       NULL, ARG_REMOVE    },
+                { "sysroot",   optional_argument, NULL, ARG_SYSROOT    },
                 { "prefix",    required_argument, NULL, ARG_PREFIX    },
                 { NULL,        0,                 NULL, 0             }
         };
@@ -1251,6 +1268,10 @@ static int parse_argv(int argc, char *ar
                         arg_remove = true;
                         break;
 
+                case ARG_SYSROOT:
+                        arg_sysroot = optarg;
+                        break;
+
                 case ARG_PREFIX:
                         arg_prefix = optarg;
                         break;
@@ -1281,7 +1302,7 @@ static int read_config_file(const char *
 
         assert(fn);
 
-        r = search_and_fopen_nulstr(fn, "re", conf_file_dirs, &f);
+        r = search_and_fopen(fn, "re", conf_file_dirs, &f);
         if (r < 0) {
                 if (ignore_enoent && r == -ENOENT)
                         return 0;
@@ -1368,6 +1389,28 @@ int main(int argc, char *argv[]) {
         items = hashmap_new(string_hash_func, string_compare_func);
         globs = hashmap_new(string_hash_func, string_compare_func);
 
+        conf_file_dirs = strv_split_nulstr(def_conf_file_dirs);
+        if (!conf_file_dirs) {
+                r = log_oom();
+                goto finish;
+        }
+
+        if (arg_sysroot && *arg_sysroot) {
+                int j;
+
+                for (j = 0; conf_file_dirs[j] && *conf_file_dirs[j]; j++) {
+                        char *new_path = NULL;
+
+                        if (asprintf(&new_path, "%s%s", arg_sysroot, conf_file_dirs[j]) < 0) {
+                                r = log_oom();
+                                goto finish;
+                        }
+
+                        free(conf_file_dirs[j]);
+                        conf_file_dirs[j] = new_path;
+                }
+        }
+
         if (!items || !globs) {
                 r = log_oom();
                 goto finish;
@@ -1388,7 +1431,7 @@ int main(int argc, char *argv[]) {
                 _cleanup_strv_free_ char **files = NULL;
                 char **f;
 
-                r = conf_files_list_nulstr(&files, ".conf", NULL, conf_file_dirs);
+                r = conf_files_list_strv(&files, ".conf", NULL, conf_file_dirs);
                 if (r < 0) {
                         log_error("Failed to enumerate tmpfiles.d files: %s", strerror(-r));
                         goto finish;
@@ -1414,6 +1457,8 @@ finish:
         while ((i = hashmap_steal_first(globs)))
                 item_free(i);
 
+        strv_free(conf_file_dirs);
+
         hashmap_free(items);
         hashmap_free(globs);
 
